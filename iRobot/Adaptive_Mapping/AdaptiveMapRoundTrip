'''
Created on Apr 19, 2016


This is the code for adaptive mapping
Wavefront algo is run and at each step robot asks if there is a new object introduced or not


@author: cosy16
'''
import pygame #for the sound ability
pygame.init() #for the initialization of pygame
from Tkinter import *
import tkMessageBox
import tkSimpleDialog
import time
import serial
from time import sleep
from copy import copy, deepcopy

import struct
import sys, glob # for listing serial ports

try:
    import serial
except ImportError:
    tkMessageBox.showerror('Import error', 'Please install pyserial.')
    raise

connection = None

#import for Wavefront
from Wavefront import waveFrontPlanner

TEXTWIDTH = 40 # window width, in characters
TEXTHEIGHT = 16 # window height, in lines

VELOCITYCHANGE = 200
ROTATIONCHANGE = 300

helpText = """\
Supported Keys:
P\tPassive
S\tSafe
F\tFull
C\tClean
D\tDock
R\tReset
Q\tDrive in a square
Space\tBeep
Arrows\tMotion
If nothing happens after you connect, try pressing 'P' and then 'S' to get into safe mode.
"""

class TetheredDriveApp(Tk):
    # static variables for keyboard callback -- I know, this is icky
    callbackKeyUp = False
    callbackKeyDown = False
    callbackKeyLeft = False
    callbackKeyRight = False
    callbackKeyLastDriveCommand = ''

    def __init__(self):
        Tk.__init__(self) #tkinter is basically just a gui for the window and stuff
        self.title("iRobot Create 2 Tethered Drive")
        self.option_add('*tearOff', FALSE)

        self.menubar = Menu()
        self.configure(menu=self.menubar)

        createMenu = Menu(self.menubar, tearoff=False)
        self.menubar.add_cascade(label="Create", menu=createMenu)

        createMenu.add_command(label="Connect", command=self.onConnect)
        createMenu.add_command(label="Help", command=self.onHelp)
        createMenu.add_command(label="Quit", command=self.onQuit)

        self.text = Text(self, height = TEXTHEIGHT, width = TEXTWIDTH, wrap = WORD)
        self.scroll = Scrollbar(self, command=self.text.yview)
        self.text.configure(yscrollcommand=self.scroll.set)
        self.text.pack(side=LEFT, fill=BOTH, expand=True)
        self.scroll.pack(side=RIGHT, fill=Y)

        self.text.insert(END, helpText)

        self.bind("<Key>", self.callbackKey)
        self.bind("<KeyRelease>", self.callbackKey)

    # sendCommandASCII takes a string of whitespace-separated, ASCII-encoded base 10 values to send
    def sendCommandASCII(self, command):
        cmd = ""
        for v in command.split():
            cmd += chr(int(v))

        self.sendCommandRaw(cmd)

    # sendCommandRaw takes a string interpreted as a byte array
    def sendCommandRaw(self, command):
        global connection

        try:
            if connection is not None:
                connection.write(command)
            else:
                tkMessageBox.showerror('Not connected!', 'Not connected to a robot!')
                print "Not connected."
        except serial.SerialException:
            print "Lost connection"
            tkMessageBox.showinfo('Uh-oh', "Lost connection to the robot!")
            connection = None

        print ' '.join([ str(ord(c)) for c in command ])
        self.text.insert(END, ' '.join([ str(ord(c)) for c in command ]))
        self.text.insert(END, '\n')
        self.text.see(END)

    # getDecodedBytes returns a n-byte value decoded using a format string.
    # Whether it blocks is based on how the connection was set up.
    def getDecodedBytes(self, n, fmt):
        global connection
        
        try:
            return struct.unpack(fmt, connection.read(n))[0]
        except serial.SerialException:
            print "Lost connection"
            tkMessageBox.showinfo('Uh-oh', "Lost connection to the robot!")
            connection = None
            return None
        except struct.error:
            print "Got unexpected data from serial port."
            return None

    
    #This is the recursive adapting mapping function that recursively recomputes the wavefront algo until
    #a valid path is found 
    #Parameters
    #robotPosX = input of robot's current x coordinate position: int
    #robotPosY = input of robot's current y coordinate position: int
    #goalX = input of the robot's goal x coordinate position: int
    #goalY = input of the robot's goal y coordinate position: int
    #floorMap = input the modified grid of the room the robot will traverse (can be modified as obstacles are found): matrix ints
    #compass = input the direction of the robot: default is usually "South": string
    #origfloorMap = input the original grid of the room robot will traverse (need to keep track to "erase temp objects")
    #return nothing
    def adaptiveMapping(self, robotPosX, robotPosY, goalX, goalY, floorMap, compass, origFloorMap):
        if robotPosX == goalX and robotPosY == goalY:
            print "PATH COMPLETED! I got into base case"
            #never get in here actually
        else:
            planner = waveFrontPlanner(floorMap, False)
            planner.setRobotPosition(robotPosX, robotPosY)
            planner.setGoalPosition(goalX, goalY)
            path = planner.run(True)
            if path is None:
                #try to find path erasing all the temp obstacles!
                floorMap = origFloorMap #we need to assign the origFloorMap to floorMap var
                planner = waveFrontPlanner(origFloorMap, False)
                path = planner.run(True)
                if path is None:
                    print "I give up! There is no path GAHHHHHH"
                    pygame.mixer.music.load("BartenderSaveMe.mp3")
                    pygame.mixer.music.play()
                    time.sleep(5)
                    return None
            triTuple = self.tryDrive(robotPosX, robotPosY, goalX, goalY, floorMap, path, compass)
            if triTuple is not None:
                robotPosX = triTuple[0]
                robotPosY = triTuple[1]
                compass = triTuple[2]
                #tried to find another path
                pygame.mixer.music.load("ExcuseMe.mp3")
                pygame.mixer.music.play()
                time.sleep(5)
                self.adaptiveMapping(robotPosX, robotPosY, goalX, goalY, floorMap, compass, origFloorMap) #recursively call itself
            print "PATH COMPLETED!"
            return path
    
    #This is the method that determines if there is an obstacle in front of the robot or not 
    #Accepts no params but returns a boolean
    #True: if there is an obstacle in front
    #False: if there is no obstacle in front of robot
    #does this by making an array of read serial bits and then splititng on "." to get the numbers
    #takes the middle elements in array not corrupted and averages the 3 to get the value 
    def isThereObstacle(self):
        #These are the tune factors for the peripherals
        #For the peripherals that make sure width of robot doesn't hit anything the range = 47
        PERIPH = 49
        #For the inside sensors that detect objects right in front the range = 33
        INSIDE = 49
        ports = ['/dev/ttyACM0', '/dev/ttyACM1', '/dev/ttyACM3']
        for usbPort in ports:
            try:
                ser = serial.Serial(usbPort, baudrate = 9600)
                print "The port: " + usbPort + "succeeded!"
            except:
                print "The port: " + usbPort + " did not work!"
        #These are the sums for each sensor
        sum1 = 0.0
        sum2 = 0.0
        sum3 = 0.0
        sum4 = 0.0
        
        #sleep for a minute so we can poll resl time values
        #time.sleep(5)
        n = 35
        print "Check to see if there is an obstacle now!!!"
        for _ in range(n):
            num1 = ser.readline()
            temp1 = ''.join(c for c in str(num1) if c.isdigit())
            while temp1 == '':
                num1 = ser.readline()
                temp1 = ''.join(c for c in str(num1) if c.isdigit())
            num2 = ser.readline()
            temp2 = ''.join(c for c in str(num2) if c.isdigit())
            while temp2 == '':
                num2 = ser.readline()
                temp2 = ''.join(c for c in str(num2) if c.isdigit()) 
            num3 = ser.readline()
            temp3 = ''.join(c for c in str(num3) if c.isdigit())
            while temp3 == '':
                num3 = ser.readline()
                temp3 = ''.join(c for c in str(num3) if c.isdigit()) 
            num4 = ser.readline()
            temp4 = ''.join(c for c in str(num4) if c.isdigit())
            while temp4 == '':
                num4 = ser.readline()
                temp4 = ''.join(c for c in str(num4) if c.isdigit())
            if int(temp1) >= 0: #make sure reading is not neg otherwise do not count
                sum1 += int(temp1)
            if int(temp2) >= 0:
                sum2 += int(temp2)
            if int(temp3) >= 0:
                sum3 += int(temp3)
            if int(temp4) >= 0:
                sum4 += int(temp4)
        #compute the averages after taking n samples
        final1 = sum1/n
        final2 = sum2/n 
        final3 = sum3/n
        final4 = sum4/n     
           
        print "final 1 is: " + str(final1)
        print "final 2 is: " + str(final2)
        print "final 3 is: " + str(final3)
        print "final 4 is: " + str(final4)
        if final1 < 0 or final2 < 0 or final3 < 0 or final4 < 0:
            print "no obstacle"
            return False
        if final1 < PERIPH or final2 < PERIPH or final3 < INSIDE or final4 < INSIDE: #these are the ones farther away: peripherals
            print "OBSCACLEEEE"
            return True

    
    #this is actually the drive module that actually sends command to the robot: before the robot moves forward,
    #the sensors will check to see if there is an obstacle
    #if there is one, the current location of the robot is returned as well as its orientation so the wavefront algo
    #can be run again
    #Parameters
    #robotPosX = input of robot's current x coordinate position: int
    #robotPosY = input of robot's current y coordinate position: int
    #goalX = input of the robot's goal x coordinate position: int
    #goalY = input of the robot's goal y coordinate position: int
    #floorMap = input the grid of the room the robot will traverse (can be modified as obstacles are found): matrix ints
    #compass = input the direction of the robot: default is usually "South": string 
    #robotPosX, robotPosY, goalX, goalY, floorMap, path, compass
    def tryDrive(self, robotPosX, robotPosY, goalX, goalY, floorMap, path, compass):
        
        #compass = "South" #what direction is it facing
        prevX = robotPosX
        prevY = robotPosY
        print "I started at: " + str(prevX) + "," + str(prevY)
        for listXYs in path:
            currX = listXYs[0]
            currY = listXYs[1]
            print "Going to: " + str(currX) + "," + str(currY)
            
            #There are four cases of places you could go
            
            #GOING NORTH
            if (prevX - 1 == currX):
                #need to check if there is something in square
                
                if compass == "South":
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "East":
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "West":
                    self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                    time.sleep(1) #pause for 90degree turn
                compass = "North"
            #GOING SOUTH
            elif (prevX + 1 == currX):
                if compass == "North":
                    #want to rotate 180 degrees
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "East":
                    self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "West":
                    self.sendCommandASCII('137 255 56 255 255') #turn countercloskwise
                    time.sleep(1) #pause for 90degree turn
                compass = "South"
            #GOING WEST
            elif (prevY - 1 == currY):
                if compass == "South":
                    self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "North":
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "East":
                    #want to rotate 180 degrees
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                compass = "West"
            #GOING EAST   
            elif (prevY + 1 == currY):
                if compass == "South":
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "North":
                    self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "West":
                    #want to rotate 180 degrees
                    self.sendCommandASCII('137 255 56 00 01') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                    self.sendCommandASCII('137 255 56 00 01') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                compass = "East"
            self.sendCommandASCII('137 00 00 00 00') #stopppp
            #check if you can drive forward
            if self.isThereObstacle():
                #tell the robot to stop cuz you gon hit somethin...
                if compass == "East":
                    floorMap[prevX][prevY + 1] = 999 #mark as obstacle
                elif compass == "West":
                    floorMap[prevX][prevY - 1] = 999 #mark as obstacle
                elif compass == "North":
                    floorMap[prevX - 1][prevY] = 999 #mark as obstacle
                elif compass == "South":
                    floorMap[prevX + 1][prevY] = 999 #mark as obstacle  
                print prevX
                print prevY
                print compass
                return prevX, prevY, compass #return the current robot's location and compass
           
            '''
            RYAN'S EDITS: tuning the forward command so it is exactly one square length
            '''
            #after each iteration wanna drive forward
            self.sendCommandASCII('137 00 148 80 00') #drive: forward
            time.sleep(1)#pause
            self.sendCommandASCII('137 00 188 80 00') #drive
            time.sleep(1)#pause 
            
            #update the prev to the currX     
            prevX = currX
            prevY = currY
            print compass
            if prevX == goalX and prevY == goalY: #if we are at goal we need to reconfigure!!!
                if compass == "North":
                    #want to rotate 180 degrees
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                    self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "East":
                    self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                    time.sleep(1) #pause for 90degree turn
                elif compass == "West":
                    self.sendCommandASCII('137 255 56 255 255') #turn countercloskwise
                    time.sleep(1) #pause for 90degree turn
                compass = "South"
                self.sendCommandASCII('137 00 00 00 00') #stop

    
    #this is the debug version with no ascii commands for robot for debugging purposes 
    #robotPosX, robotPosY, goalX, goalY, floorMap, compass, origFloorMap   
    def tryDriveDebug(self, robotPosX, robotPosY, goalX, goalY, floorMap, path, compass):
        
        #compass = "South" #what direction is it facing
        prevX = robotPosX
        prevY = robotPosY
        print "I started at: " + str(prevX) + "," + str(prevY)
        for listXYs in path:
            currX = listXYs[0]
            currY = listXYs[1]
            print "Going to: " + str(currX) + "," + str(currY)
            
            #There are four cases of places you could go
            
            #GOING NORTH
            if (prevX - 1 == currX):
                #need to check if there is something in square
                
                if compass == "South":
                    print "Turn counterclockwise 90"
                    print "Turn counterclockwise 90"
                elif compass == "East":
                    print "Turn counterclockwise 90"
                elif compass == "West":
                    print "Turn clockwise 90"
                compass = "North"
            #GOING SOUTH
            elif (prevX + 1 == currX):
                if compass == "North":
                    print "Turn counterclockwise 90"
                    print "Turn counterclockwise 90"
                elif compass == "East":
                    print "Turn clockwise 90"
                elif compass == "West":
                    print "Turn counterclockwise 90"
                compass = "South"
            #GOING WEST
            elif (prevY - 1 == currY):
                if compass == "South":
                    print "Turn clockwise 90"
                elif compass == "North":
                    print "Turn counterclockwise 90"
                elif compass == "East":
                    #want to rotate 180 degrees
                    print "Turn counterclockwise 90"
                    print "Turn counterclockwise 90"
                compass = "West"
            #GOING EAST   
            elif (prevY + 1 == currY):
                if compass == "South":
                    print "Turn counterclockwise 90"
                elif compass == "North":
                    print "Turn clockwise 90"
                elif compass == "West":
                    print "Turn counterclockwise 90"
                    print "Turn counterclockwise 90"
                compass = "East"
            
            #check if you can drive forward
            if self.isThereObstacle():
                if compass == "East":
                    floorMap[prevX][prevY + 1] = 999 #mark as obstacle
                elif compass == "West":
                    floorMap[prevX][prevY - 1] = 999 #mark as obstacle
                elif compass == "North":
                    floorMap[prevX - 1][prevY] = 999 #mark as obstacle
                elif compass == "South":
                    floorMap[prevX + 1][prevY] = 999 #mark as obstacle
                print "This is the x" + str(prevX)
                print "This is the y" + str(prevY )
                print compass
                return prevX, prevY, compass #return the current robot's location and compass
           
            '''
            RYAN'S EDITS: tuning the forward command so it is exactly one square length
            '''
            #after each iteration wanna drive forward
            print "go straight one square" 
            
            #update the prev to the currX     
            prevX = currX
            prevY = currY
            
            #return None
    
    #This is the main call for the adaptive mapping module: we call this from a key press
    #The params in this method can be tuned to take in a different floormap, start and goal state
    def runAdaptiveMapping(self):
        STARTX = 0 #bartender x coordinate
        STARTY = 0 #bartender y coordinate
        ENDX = 4 #customer x coordinate
        ENDY = 1 #customer y coordinate
        floormap1 = [[000,000,000], \
                [000,000,000], \
                [000,000,000], \
                [000,000,000], \
                [000,000,000]] 
        print "Start trip to customer..."
        path1 = self.adaptiveMapping(STARTX, STARTY, ENDX, ENDY, deepcopy(floormap1), "South", deepcopy(floormap1))
        if path1 is not None:
            self.sendCommandASCII('137 00 00 00 00') #stop
            pygame.mixer.music.load("DrinkArrived.mp3")
            pygame.mixer.music.play()
            time.sleep(6) #wait to say you're welcome
            pygame.mixer.music.load("YouWelcome.mp3")
            pygame.mixer.music.play()
            time.sleep(2)
            self.sendCommandASCII('137 00 00 00 00') #stop
        
        #now we need to do a roundtrip
        print 'Start trip back to bartender...'
        path2 = self.adaptiveMapping(ENDX, ENDY, STARTX, STARTY, deepcopy(floormap1), "South", deepcopy(floormap1))
        if path2 is not None:
            pygame.mixer.music.load("BartenderArrive.mp3")
            pygame.mixer.music.play()
            time.sleep(3)
            self.sendCommandASCII('137 00 00 00 00') #stop
           
    # A handler for keyboard events. Feel free to add more!
    def callbackKey(self, event):
        k = event.keysym.upper()
        motionChange = False

        if event.type == '2': # KeyPress; need to figure out how to get constant
            if k == 'P':   # Passive
                self.sendCommandASCII('128')
            elif k == 'G': #this is the key for doing the wavefront path planning
                app.runAdaptiveMapping()
            elif k == 'L':
                self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                time.sleep(1) #pause for 90degree turn
                self.sendCommandASCII('137 00 00 00 00') #stop
                self.sendCommandASCII('137 255 56 255 255') #turn counterclockwise
                time.sleep(1) #pause for 90degree turn
                self.sendCommandASCII('137 00 00 00 00') #stop
            elif k == 'R':
                #time.sleep(1) #pause for 90degree turn
                self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                time.sleep(1)
                self.sendCommandASCII('137 00 00 00 00') #stop
                self.sendCommandASCII('137 255 56 00 01') #turn clockwise
                time.sleep(1)
                self.sendCommandASCII('137 00 00 00 00') #stop
            elif k == 'A':
                self.runAdaptiveMapping()
                self.sendCommandASCII('137 00 00 00 00') #stop
            elif k == 'S': # Safe
                self.sendCommandASCII('131')
            elif k == 'F': # Full
                self.sendCommandASCII('132')
            elif k == 'C': # Clean
                self.sendCommandASCII('135')
            elif k == 'D': # Dock
                self.sendCommandASCII('143')
            elif k == 'SPACE': # Beep
                self.sendCommandASCII('140 3 1 64 16 141 3')
            elif k == 'R': # Reset
                self.sendCommandASCII('7')
            elif k == 'UP':
                self.callbackKeyUp = True
                motionChange = True
            elif k == 'DOWN':
                self.callbackKeyDown = True
                motionChange = True
            elif k == 'LEFT':
                self.callbackKeyLeft = True
                motionChange = True
            elif k == 'RIGHT':
                self.callbackKeyRight = True
                motionChange = True
            elif k == 'R': #drive in a circle, reverse velocity -200 w/ r=500mm
                self.sendCommandASCII('137 255 56 1 244')
            else:
                print repr(k), "not handled"
        elif event.type == '3': # KeyRelease; need to figure out how to get constant
            if k == 'UP':
                self.callbackKeyUp = False
                motionChange = True
            elif k == 'DOWN':
                self.callbackKeyDown = False
                motionChange = True
            elif k == 'LEFT':
                self.callbackKeyLeft = False
                motionChange = True
            elif k == 'RIGHT':
                self.callbackKeyRight = False
                motionChange = True
            elif k == 'R':
                self.sendCommandASCII('127 0 0 0 0') #theoretically stops driving?

        if motionChange == True:
            velocity = 0
            velocity += VELOCITYCHANGE if self.callbackKeyUp is True else 0
            velocity -= VELOCITYCHANGE if self.callbackKeyDown is True else 0
            rotation = 0
            rotation += ROTATIONCHANGE if self.callbackKeyLeft is True else 0
            rotation -= ROTATIONCHANGE if self.callbackKeyRight is True else 0

            # compute left and right wheel velocities
            vr = velocity + (rotation/2)
            vl = velocity - (rotation/2)

            # create drive command
            cmd = struct.pack(">Bhh", 145, vr, vl)
            if cmd != self.callbackKeyLastDriveCommand:
                self.sendCommandRaw(cmd)
                self.callbackKeyLastDriveCommand = cmd

    def onConnect(self):
        global connection
        if connection is not None:
            tkMessageBox.showinfo('Oops', "You're already connected!")
            return
        port = "/dev/ttyUSB0"
        ports = ['/dev/ttyUSB0', '/dev/ttyUSB1']
        '''
        for usbPort in ports:
            try:
                port = serial.Serial(usbPort, baudrate = 9600)
                print "The port: " + usbPort + "succeeded!"
            except:
                print "The port: " + usbPort + " did not work!"
        #These are the sums for each sensor
        '''
        
        print "Trying " + str(port) + "... "
        try:
            connection = serial.Serial(port, baudrate=115200, timeout=1)
            print "Connected!"
            tkMessageBox.showinfo('Connected', "Connection succeeded!")
        except:
            print "Failed."
            tkMessageBox.showinfo('Failed', "Sorry, couldn't connect to " + str(port))


    def onHelp(self):
        tkMessageBox.showinfo('Help', helpText)

    def onQuit(self):
        if tkMessageBox.askyesno('Really?', 'Are you sure you want to quit?'):
            self.destroy()
  

if __name__ == "__main__":
    
    app = TetheredDriveApp() #initializes the object
    app.mainloop()
    
    #app.runAdaptiveMapping() #run the adaptive mapping module
